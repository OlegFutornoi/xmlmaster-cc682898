
// –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ—Ä–æ–±–ª–µ–Ω–∞ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É XML —Ñ–∞–π–ª—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏

export interface ParsedXMLParameter {
  parameter_name: string;
  parameter_value: string | null;
  parameter_type: string;
  parameter_category: 'parameter' | 'characteristic' | 'category' | 'offer' | 'currency';
  xml_path: string;
  is_required: boolean;
  is_active: boolean;
  display_order: number;
  parent_parameter?: string;
  nested_values?: Array<{ lang?: string; value: string }>;
}

export const parseXMLToParameters = (xmlContent: string): ParsedXMLParameter[] => {
  const parser = new DOMParser();
  const xmlDoc = parser.parseFromString(xmlContent, 'text/xml');
  const parameters: ParsedXMLParameter[] = [];
  let displayOrder = 0;

  console.log('–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ XML...');

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É
  const addParameter = (
    name: string,
    value: string | null,
    category: ParsedXMLParameter['parameter_category'],
    xmlPath: string,
    type: string = 'text',
    isRequired: boolean = false,
    parentParam?: string,
    nestedValues?: Array<{ lang?: string; value: string }>
  ) => {
    const parameter = {
      parameter_name: name,
      parameter_value: value,
      parameter_type: type,
      parameter_category: category,
      xml_path: xmlPath,
      is_required: isRequired,
      is_active: true,
      display_order: displayOrder++,
      parent_parameter: parentParam,
      nested_values: nestedValues
    };
    
    parameters.push(parameter);
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä [${displayOrder-1}]: ${name} = "${value}" (${category}) -> ${xmlPath}`);
  };

  // 1. –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ú–ê–ì–ê–ó–ò–ù–£ (shop level)
  console.log('üè™ –û–±—Ä–æ–±–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –º–∞–≥–∞–∑–∏–Ω—É...');
  const shop = xmlDoc.querySelector('shop');
  if (shop) {
    const name = shop.querySelector('name');
    if (name?.textContent) {
      addParameter('shop_name', name.textContent.trim(), 'parameter', 'shop/name', 'text', true);
    }

    const company = shop.querySelector('company');
    if (company?.textContent) {
      addParameter('shop_company', company.textContent.trim(), 'parameter', 'shop/company', 'text', false);
    }

    const url = shop.querySelector('url');
    if (url?.textContent) {
      addParameter('shop_url', url.textContent.trim(), 'parameter', 'shop/url', 'url', false);
    }
  }

  // 2. –í–ê–õ–Æ–¢–ò (currencies level)
  console.log('üí± –û–±—Ä–æ–±–∫–∞ –≤–∞–ª—é—Ç...');
  const currencies = xmlDoc.querySelectorAll('currencies currency');
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${currencies.length} –≤–∞–ª—é—Ç`);
  
  currencies.forEach((currency, index) => {
    const currencyId = currency.getAttribute('id');
    const rate = currency.getAttribute('rate') || '1';
    
    if (currencyId) {
      console.log(`üí∞ –û–±—Ä–æ–±–∫–∞ –≤–∞–ª—é—Ç–∏: ${currencyId}, –∫—É—Ä—Å: ${rate}`);
      
      // –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É—é—á–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∞–ª—é—Ç–∏
      const groupName = `currency_${currencyId}`;
      addParameter(groupName, `${currencyId} (–∫—É—Ä—Å: ${rate})`, 'currency', `currencies/currency[@id="${currencyId}"]`, 'text', true);
      
      // –î–æ–¥–∞—î–º–æ ID –≤–∞–ª—é—Ç–∏ —è–∫ –ø—ñ–¥–ø–∞—Ä–∞–º–µ—Ç—Ä
      addParameter(`${groupName}_id`, currencyId, 'currency', `currencies/currency[@id="${currencyId}"]/@id`, 'text', true, groupName);
      
      // –î–æ–¥–∞—î–º–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏ —è–∫ –ø—ñ–¥–ø–∞—Ä–∞–º–µ—Ç—Ä
      addParameter(`${groupName}_rate`, rate, 'currency', `currencies/currency[@id="${currencyId}"]/@rate`, 'number', true, groupName);
    }
  });

  // 3. –ö–ê–¢–ï–ì–û–†–Ü–á (categories level)
  console.log('üìÇ –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...');
  const categories = xmlDoc.querySelectorAll('categories category');
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`);
  
  categories.forEach((category, index) => {
    const categoryId = category.getAttribute('id');
    const categoryName = category.textContent?.trim();
    const rzId = category.getAttribute('rz_id');
    
    if (categoryId && categoryName) {
      console.log(`üìã –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${categoryId} = "${categoryName}"${rzId ? ` (rz_id: ${rzId})` : ''}`);
      
      // –î–æ–¥–∞—î–º–æ –≥—Ä—É–ø—É—é—á–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
      const groupName = `category_${categoryId}`;
      addParameter(groupName, `${categoryName} (ID: ${categoryId})`, 'category', `categories/category[@id="${categoryId}"]`, 'text', true);
      
      // –î–æ–¥–∞—î–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫ –ø—ñ–¥–ø–∞—Ä–∞–º–µ—Ç—Ä
      addParameter(`${groupName}_id`, categoryId, 'category', `categories/category[@id="${categoryId}"]/@id`, 'text', true, groupName);
      
      // –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫ –ø—ñ–¥–ø–∞—Ä–∞–º–µ—Ç—Ä
      addParameter(`${groupName}_name`, categoryName, 'category', `categories/category[@id="${categoryId}"]`, 'text', true, groupName);
      
      // –î–æ–¥–∞—î–º–æ rz_id —è–∫—â–æ —î
      if (rzId) {
        addParameter(`${groupName}_rz_id`, rzId, 'category', `categories/category[@id="${categoryId}"]/@rz_id`, 'text', false, groupName);
      }
    }
  });

  // 4. –¢–û–í–ê–†–ò (offers level) - –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä —è–∫ –∑—Ä–∞–∑–æ–∫
  console.log('üõçÔ∏è –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤...');
  const offers = xmlDoc.querySelectorAll('offers offer');
  console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${offers.length} —Ç–æ–≤–∞—Ä—ñ–≤`);
  
  if (offers.length > 0) {
    const offer = offers[0]; // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä —è–∫ –∑—Ä–∞–∑–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    const offerId = offer.getAttribute('id');
    const available = offer.getAttribute('available');
    
    console.log(`üéØ –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—É-–∑—Ä–∞–∑–∫–∞: ${offerId}, –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${available}`);
    
    // –î–æ–¥–∞—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ —Ç–æ–≤–∞—Ä—É
    if (offerId) {
      addParameter('offer_id', offerId, 'offer', 'offers/offer/@id', 'text', true);
    }
    if (available) {
      addParameter('offer_available', available, 'offer', 'offers/offer/@available', 'boolean', false);
    }

    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ç–æ–≤–∞—Ä—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const offerChildren = Array.from(offer.children);
    console.log(`–¢–æ–≤–∞—Ä –º–∞—î ${offerChildren.length} –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);
    
    offerChildren.forEach((child, childIndex) => {
      const tagName = child.tagName.toLowerCase();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ param —Ç–µ–≥–∏, —ó—Ö –æ–±—Ä–æ–±–∏–º–æ –æ–∫—Ä–µ–º–æ
      if (tagName === 'param') return;
      
      const value = child.textContent?.trim();
      let paramType = 'text';
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—É
      if (tagName === 'price' || tagName === 'stock_quantity') {
        paramType = 'number';
      } else if (tagName === 'picture') {
        paramType = 'url';
      } else if (tagName === 'description' || tagName === 'description_ua') {
        paramType = 'textarea';
      }
      
      console.log(`üìù –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–≤–∞—Ä—É: ${tagName} = "${value?.substring(0, 50)}${value && value.length > 50 ? '...' : ''}"`);
      addParameter(tagName, value || null, 'offer', `offers/offer/${tagName}`, paramType, false);
    });

    // 5. –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –¢–û–í–ê–†–£ (param elements)
    console.log('üîß –û–±—Ä–æ–±–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä—É...');
    const params = offer.querySelectorAll('param');
    console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${params.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫`);
    
    params.forEach((param, paramIndex) => {
      const paramName = param.getAttribute('name');
      if (!paramName) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ param –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç—É name`);
        return;
      }
      
      console.log(`üè∑Ô∏è –û–±—Ä–æ–±–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${paramName}`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∫–ª–∞–¥–µ–Ω—ñ value –µ–ª–µ–º–µ–Ω—Ç–∏
      const valueElements = param.querySelectorAll('value');
      if (valueElements.length > 0) {
        const nestedValues: Array<{ lang?: string; value: string }> = [];
        let mainValue = '';
        
        valueElements.forEach((valueEl, valueIndex) => {
          const lang = valueEl.getAttribute('lang');
          const value = valueEl.textContent?.trim() || '';
          nestedValues.push({ lang: lang || undefined, value });
          if (!mainValue) mainValue = value; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫ –æ—Å–Ω–æ–≤–Ω–µ
          
          console.log(`  üìå –í–∫–ª–∞–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è [${valueIndex}]: ${lang ? `${lang}:` : ''} "${value}"`);
        });
        
        addParameter(
          `param_${paramName}`, 
          mainValue, 
          'characteristic', 
          `offers/offer/param[@name="${paramName}"]`, 
          'text', 
          false,
          undefined,
          nestedValues
        );
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        const value = param.textContent?.trim();
        console.log(`  üìã –ü—Ä–æ—Å—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è: "${value}"`);
        addParameter(
          `param_${paramName}`, 
          value || null, 
          'characteristic', 
          `offers/offer/param[@name="${paramName}"]`, 
          'text', 
          false
        );
      }
    });
  }

  console.log(`‚ú® –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å—å–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: ${parameters.length}`);
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:');
  const stats = parameters.reduce((acc, param) => {
    acc[param.parameter_category] = (acc[param.parameter_category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  Object.entries(stats).forEach(([category, count]) => {
    console.log(`  - ${category}: ${count} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤`);
  });

  return parameters;
};

export const importXMLParameters = async (
  xmlContent: string, 
  templateId: string, 
  createParameterFn: (parameter: any) => Promise<void>
) => {
  try {
    console.log('üöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç XML –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤...');
    console.log(`üìÑ Template ID: ${templateId}`);
    console.log(`üìè –†–æ–∑–º—ñ—Ä XML –∫–æ–Ω—Ç–µ–Ω—Ç—É: ${xmlContent.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
    
    const parsedParameters = parseXMLToParameters(xmlContent);
    console.log(`üì¶ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ ${parsedParameters.length} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤`);
    
    if (parsedParameters.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ–º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É');
      return 0;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –ø–æ —á–µ—Ä–∑—ñ
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < parsedParameters.length; i++) {
      const param = parsedParameters[i];
      const parameterData = {
        template_id: templateId,
        parameter_name: param.parameter_name,
        parameter_value: param.parameter_value,
        parameter_type: param.parameter_type,
        parameter_category: param.parameter_category,
        xml_path: param.xml_path,
        is_required: param.is_required,
        is_active: param.is_active,
        display_order: param.display_order,
        parent_parameter: param.parent_parameter,
        nested_values: param.nested_values ? JSON.stringify(param.nested_values) : null
      };
      
      console.log(`üíæ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä ${i + 1}/${parsedParameters.length}: ${param.parameter_name}`);
      
      try {
        await createParameterFn(parameterData);
        successCount++;
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${param.parameter_name}`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É ${param.parameter_name}:`, error);
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –æ–¥–∏–Ω –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏
      }
    }
    
    console.log(`üéâ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${successCount} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤`);
    console.log(`‚ùå –ü–æ–º–∏–ª–æ–∫: ${errorCount}`);
    
    return successCount;
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É XML –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤:', error);
    throw error;
  }
};
