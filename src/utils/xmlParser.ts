
// –ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π XML-–ø–∞—Ä—Å–µ—Ä –¥–ª—è YML-—Ñ–∞–π–ª—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –∑–≥—ñ–¥–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
export interface ParsedXMLStructure {
  shop?: {
    name?: string;
    company?: string;
    url?: string;
  };
  currencies?: Array<{
    id: string;
    rate: number;
  }>;
  categories?: Array<{
    id: string;
    name: string;
    rz_id?: string;
  }>;
  offers?: Array<{
    id: string;
    available?: boolean;
    [key: string]: any;
  }>;
  parameters: Array<{
    name: string;
    value: any;
    path: string;
    type: 'parameter' | 'characteristic';
    category: 'shop' | 'currency' | 'category' | 'offer';
    multilingual_values?: Record<string, string>;
    cdata_content?: string;
    attributes?: Record<string, string>;
  }>;
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
export interface ParsedTreeStructure {
  type: 'shop' | 'currencies' | 'categories' | 'offers';
  name: string;
  icon: string;
  children: ParsedTreeNode[];
}

export interface ParsedTreeNode {
  type: string;
  name: string;
  value?: string;
  icon: string;
  attributes?: Record<string, string>;
  cdata?: boolean;
  multilingual?: Record<string, string>;
  children?: ParsedTreeNode[];
}

// –û—á–∏—â–µ–Ω–Ω—è CDATA —Å–µ–∫—Ü—ñ–π
const cleanCDATA = (text: string): string => {
  if (!text) return '';
  return text
    .replace(/<!\[CDATA\[/g, '')
    .replace(/\]\]>/g, '')
    .trim();
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –µ–ª–µ–º–µ–Ω—Ç—É –≤–∫–ª—é—á–∞—é—á–∏ CDATA
const getElementText = (element: Element): string => {
  if (!element) return '';
  
  const cdataNodes = Array.from(element.childNodes).filter(
    node => node.nodeType === Node.CDATA_SECTION_NODE
  );
  
  if (cdataNodes.length > 0) {
    return cdataNodes.map(node => cleanCDATA(node.textContent || '')).join('');
  }
  
  return element.textContent?.trim() || '';
};

// –ü–æ–±—É–¥–æ–≤–∞ XML —à–ª—è—Ö—É
const buildXMLPath = (element: Element): string => {
  const path: string[] = [];
  let current: Element | null = element;
  
  while (current && current.nodeType === Node.ELEMENT_NODE) {
    let nodeName = current.nodeName.toLowerCase();
    
    if (current.hasAttribute('id')) {
      nodeName += `[@id="${current.getAttribute('id')}"]`;
    } else if (current.hasAttribute('name')) {
      nodeName += `[@name="${current.getAttribute('name')}"]`;
    } else if (current.hasAttribute('lang')) {
      nodeName += `[@lang="${current.getAttribute('lang')}"]`;
    }
    
    path.unshift(nodeName);
    current = current.parentElement;
    
    if (current && (current.nodeName === 'yml_catalog' || current.nodeName === 'shop')) {
      break;
    }
  }
  
  return '/' + path.join('/');
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –µ–ª–µ–º–µ–Ω—Ç–∞
const getElementAttributes = (element: Element): Record<string, string> => {
  const attributes: Record<string, string> = {};
  for (let i = 0; i < element.attributes.length; i++) {
    const attr = element.attributes[i];
    attributes[attr.name] = attr.value;
  }
  return attributes;
};

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç CDATA
const hasCDATA = (element: Element): boolean => {
  return Array.from(element.childNodes).some(
    node => node.nodeType === Node.CDATA_SECTION_NODE
  );
};

// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
const getParamIcon = (paramName: string): string => {
  const name = paramName.toLowerCase();
  if (name.includes('–∑—Ä—ñ—Å—Ç') || name.includes('—Ä–æ–∑–º—ñ—Ä')) return 'üìè';
  if (name.includes('—Å–µ–∑–æ–Ω')) return 'üçÇ';
  if (name.includes('–∫–æ–ª—ñ—Ä')) return 'üé®';
  if (name.includes('–º–æ–¥–µ–ª') || name.includes('–æ—Å–æ–±–ª–∏–≤')) return 'üëï';
  if (name.includes('—Å–∫–ª–∞–¥') || name.includes('–º–∞—Ç–µ—Ä—ñ–∞–ª')) return 'üßµ';
  if (name.includes('–¥–æ–≥–ª—è–¥') || name.includes('–ø—Ä–∞–Ω–Ω—è')) return 'üß∫';
  if (name.includes('–∫—Ä–∞—ó–Ω–∞') || name.includes('–≤–∏—Ä–æ–±–Ω–∏–∫')) return 'üåç';
  return 'üìã';
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
export const createXMLTreeStructure = (xmlString: string): ParsedTreeStructure[] => {
  console.log('=== –°–¢–í–û–†–ï–ù–ù–Ø –°–¢–†–£–ö–¢–£–†–ò –î–ï–†–ï–í–ê ===');
  console.log('XML –∫–æ–Ω—Ç–µ–Ω—Ç:', xmlString.substring(0, 500) + '...');
  
  const parser = new DOMParser();
  const xmlDoc = parser.parseFromString(xmlString, 'text/xml');
  
  const parseErrors = xmlDoc.getElementsByTagName('parsererror');
  if (parseErrors.length > 0) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML:', parseErrors[0].textContent);
    throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç XML —Ñ–∞–π–ª—É');
  }
  
  const result: ParsedTreeStructure[] = [];

  // 1. SHOP
  const shopElement = xmlDoc.querySelector('shop');
  if (shopElement) {
    console.log('=== –û–ë–†–û–ë–ö–ê SHOP ===');
    const shopChildren: ParsedTreeNode[] = [];
    
    const shopName = shopElement.querySelector('name');
    const shopCompany = shopElement.querySelector('company');
    const shopUrl = shopElement.querySelector('url');
    
    if (shopName) {
      const nameValue = getElementText(shopName);
      console.log('Shop name:', nameValue);
      shopChildren.push({
        type: 'name',
        name: 'name',
        value: nameValue,
        icon: 'üè™'
      });
    }
    
    if (shopCompany) {
      const companyValue = getElementText(shopCompany);
      console.log('Shop company:', companyValue);
      shopChildren.push({
        type: 'company',
        name: 'company',
        value: companyValue,
        icon: 'üè¢'
      });
    }
    
    if (shopUrl) {
      const urlValue = getElementText(shopUrl);
      console.log('Shop url:', urlValue);
      shopChildren.push({
        type: 'url',
        name: 'url',
        value: urlValue,
        icon: 'üåê'
      });
    }

    // –í–∞–ª—é—Ç–∏
    const currenciesElement = shopElement.querySelector('currencies');
    if (currenciesElement) {
      console.log('=== –û–ë–†–û–ë–ö–ê CURRENCIES ===');
      const currencyChildren: ParsedTreeNode[] = [];
      const currencyElements = currenciesElement.querySelectorAll('currency');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç: ${currencyElements.length}`);
      
      currencyElements.forEach(currency => {
        const id = currency.getAttribute('id');
        const rate = currency.getAttribute('rate');
        
        console.log(`–í–∞–ª—é—Ç–∞: ${id} = ${rate}`);
        
        if (id) {
          currencyChildren.push({
            type: 'currency',
            name: 'currency',
            value: `(id="${id}", rate="${rate}")`,
            icon: id === 'UAH' ? 'üí∞' : id === 'USD' ? 'üíµ' : 'üí∂',
            attributes: { id, rate: rate || '1' }
          });
        }
      });

      if (currencyChildren.length > 0) {
        shopChildren.push({
          type: 'currencies',
          name: 'currencies',
          icon: 'üí±',
          children: currencyChildren
        });
      }
    }

    // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    const categoriesElement = shopElement.querySelector('categories');
    if (categoriesElement) {
      console.log('=== –û–ë–†–û–ë–ö–ê CATEGORIES ===');
      const categoryChildren: ParsedTreeNode[] = [];
      const categoryElements = categoriesElement.querySelectorAll('category');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categoryElements.length}`);
      
      categoryElements.forEach(category => {
        const id = category.getAttribute('id');
        const name = getElementText(category);
        const rz_id = category.getAttribute('rz_id');
        
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: "${name}" (ID: ${id}${rz_id ? `, RZ_ID: ${rz_id}` : ''})`);
        
        if (id && name) {
          const attributes: Record<string, string> = { id };
          if (rz_id) attributes.rz_id = rz_id;
          
          categoryChildren.push({
            type: 'category',
            name: 'category',
            value: `(id="${id}")${rz_id ? `, rz_id="${rz_id}"` : ''}: "${name}"`,
            icon: 'üìÅ',
            attributes
          });
        }
      });

      if (categoryChildren.length > 0) {
        shopChildren.push({
          type: 'categories',
          name: 'categories',
          icon: 'üìÇ',
          children: categoryChildren
        });
      }
    }

    // –¢–æ–≤–∞—Ä–∏ (offers)
    const offersElement = shopElement.querySelector('offers');
    if (offersElement) {
      console.log('=== –û–ë–†–û–ë–ö–ê OFFERS ===');
      const offerChildren: ParsedTreeNode[] = [];
      const offerElements = offersElement.querySelectorAll('offer');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${offerElements.length}`);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–∏–π –æ—Ñ—Ñ–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
      const firstOffer = offerElements[0];
      if (firstOffer) {
        const id = firstOffer.getAttribute('id');
        const available = firstOffer.getAttribute('available');
        
        console.log(`–û–±—Ä–æ–±–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞: ID=${id}, available=${available}`);
        
        const offerNode: ParsedTreeNode = {
          type: 'offer',
          name: 'offer',
          value: `(id="${id}", available="${available}")`,
          icon: 'üì¶',
          attributes: { id: id || '', available: available || 'true' },
          children: []
        };

        // –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –æ—Ñ—Ñ–µ—Ä–∞
        const offerFields = [
          { tag: 'price', icon: 'üí≤' },
          { tag: 'currencyId', icon: 'üí±' },
          { tag: 'categoryId', icon: 'üóÇÔ∏è' },
          { tag: 'vendor', icon: 'üè∑Ô∏è' },
          { tag: 'article', icon: 'üîñ' },
          { tag: 'stock_quantity', icon: 'üì¶' },
          { tag: 'quantity_in_stock', icon: 'üì¶' },
          { tag: 'name', icon: 'üè∑Ô∏è' },
          { tag: 'model', icon: 'üè∑Ô∏è' },
          { tag: 'name_ua', icon: 'üè∑Ô∏è' },
          { tag: 'model_ua', icon: 'üè∑Ô∏è' },
          { tag: 'description', icon: 'üìù' },
          { tag: 'description_ua', icon: 'üìù' },
          { tag: 'state', icon: 'üìä' },
          { tag: 'docket', icon: 'üìã' },
          { tag: 'docket_ua', icon: 'üìã' }
        ];

        offerFields.forEach(field => {
          const element = firstOffer.querySelector(field.tag);
          if (element) {
            const value = getElementText(element);
            const isCDATA = hasCDATA(element);
            
            console.log(`  ${field.tag}: ${value}${isCDATA ? ' (CDATA)' : ''}`);
            
            offerNode.children!.push({
              type: field.tag,
              name: field.tag,
              value: isCDATA ? '<![CDATA[...]]>' + (field.tag.includes('_ua') ? ' (UA HTML)' : ' (RU HTML)') : value,
              icon: field.icon,
              cdata: isCDATA
            });
          }
        });

        // –ö–∞—Ä—Ç–∏–Ω–∫–∏
        const pictureElements = firstOffer.querySelectorAll('picture');
        console.log(`  –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${pictureElements.length}`);
        pictureElements.forEach(picture => {
          const imageUrl = getElementText(picture);
          if (imageUrl) {
            offerNode.children!.push({
              type: 'picture',
              name: 'picture',
              value: imageUrl,
              icon: 'üñºÔ∏è'
            });
          }
        });

        // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
        const paramElements = firstOffer.querySelectorAll('param');
        console.log(`  –ó–Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: ${paramElements.length}`);
        
        paramElements.forEach(paramElement => {
          const paramName = paramElement.getAttribute('name') || '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä';
          const paramid = paramElement.getAttribute('paramid');
          const valueid = paramElement.getAttribute('valueid');
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
          const valueElements = paramElement.querySelectorAll('value[lang]');
          
          if (valueElements.length > 0) {
            // –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            console.log(`    –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: ${paramName}`);
            const paramNode: ParsedTreeNode = {
              type: 'param',
              name: 'param',
              value: `(name="${paramName}")`,
              icon: getParamIcon(paramName),
              children: []
            };

            const multilingual: Record<string, string> = {};
            valueElements.forEach(valueElement => {
              const lang = valueElement.getAttribute('lang');
              const value = getElementText(valueElement);
              if (lang && value) {
                multilingual[lang] = value;
                console.log(`      ${lang}: ${value}`);
                paramNode.children!.push({
                  type: 'value',
                  name: 'value',
                  value: `(lang="${lang}"): "${value}"`,
                  icon: lang === 'uk' ? 'üá∫üá¶' : 'üá∑üá∫'
                });
              }
            });

            paramNode.multilingual = multilingual;
            offerNode.children!.push(paramNode);
          } else {
            // –ó–≤–∏—á–∞–π–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            const value = getElementText(paramElement);
            const attributes: Record<string, string> = { name: paramName };
            if (paramid) attributes.paramid = paramid;
            if (valueid) attributes.valueid = valueid;
            
            console.log(`    –ü–∞—Ä–∞–º–µ—Ç—Ä: ${paramName} = ${value}`);
            
            offerNode.children!.push({
              type: 'param',
              name: 'param',
              value: `(name="${paramName}"): "${value}"`,
              icon: getParamIcon(paramName),
              attributes
            });
          }
        });

        offerChildren.push(offerNode);
      }

      if (offerChildren.length > 0) {
        shopChildren.push({
          type: 'offers',
          name: 'offers',
          icon: 'üéÅ',
          children: offerChildren
        });
      }
    }

    result.push({
      type: 'shop',
      name: 'shop',
      icon: 'üõçÔ∏è',
      children: shopChildren
    });
  }

  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–µ—Ä–µ–≤–∞:', result);
  return result;
};

export const parseAdvancedXML = (xmlString: string): ParsedXMLStructure => {
  console.log('=== –ü–û–ß–ê–¢–û–ö –ü–ê–†–°–ò–ù–ì–£ XML ===');
  
  const parser = new DOMParser();
  const xmlDoc = parser.parseFromString(xmlString, 'text/xml');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É
  const parseErrors = xmlDoc.getElementsByTagName('parsererror');
  if (parseErrors.length > 0) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML:', parseErrors[0].textContent);
    throw new Error('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç XML —Ñ–∞–π–ª—É');
  }
  
  const result: ParsedXMLStructure = {
    parameters: []
  };

  // 1. –ü–ê–†–°–ò–ù–ì –ú–ê–ì–ê–ó–ò–ù–£
  const shopElement = xmlDoc.querySelector('shop');
  if (shopElement) {
    console.log('=== –ü–ê–†–°–ò–ù–ì –Ü–ù–§–û–†–ú–ê–¶–Ü–á –ü–†–û –ú–ê–ì–ê–ó–ò–ù ===');
    
    const shopName = shopElement.querySelector('name');
    const shopCompany = shopElement.querySelector('company');
    const shopUrl = shopElement.querySelector('url');
    
    result.shop = {
      name: shopName ? getElementText(shopName) : undefined,
      company: shopCompany ? getElementText(shopCompany) : undefined,
      url: shopUrl ? getElementText(shopUrl) : undefined
    };

    console.log('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω:', result.shop);

    // –î–æ–¥–∞—î–º–æ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    if (result.shop.name) {
      result.parameters.push({
        name: '–ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É',
        value: result.shop.name,
        path: '/shop/name',
        type: 'parameter',
        category: 'shop'
      });
    }
    if (result.shop.company) {
      result.parameters.push({
        name: '–ö–æ–º–ø–∞–Ω—ñ—è',
        value: result.shop.company,
        path: '/shop/company',
        type: 'parameter',
        category: 'shop'
      });
    }
    if (result.shop.url) {
      result.parameters.push({
        name: 'URL –º–∞–≥–∞–∑–∏–Ω—É',
        value: result.shop.url,
        path: '/shop/url',
        type: 'parameter',
        category: 'shop'
      });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–ª—é—Ç
    const currenciesElement = shopElement.querySelector('currencies');
    if (currenciesElement) {
      console.log('=== –ü–ê–†–°–ò–ù–ì –í–ê–õ–Æ–¢ ===');
      
      const currencies: Array<{id: string; rate: number}> = [];
      const currencyElements = currenciesElement.querySelectorAll('currency');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç: ${currencyElements.length}`);
      
      currencyElements.forEach((currency, index) => {
        const id = currency.getAttribute('id');
        const rateStr = currency.getAttribute('rate');
        const rate = parseFloat(rateStr || '1');
        
        console.log(`–í–∞–ª—é—Ç–∞ ${index + 1}: ${id} = ${rate}`);
        
        if (id) {
          currencies.push({ id, rate });
          
          result.parameters.push({
            name: `–í–∞–ª—é—Ç–∞ ${id}`,
            value: rate.toString(),
            path: buildXMLPath(currency),
            type: 'parameter',
            category: 'currency',
            attributes: getElementAttributes(currency)
          });
        }
      });
      
      result.currencies = currencies;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    const categoriesElement = shopElement.querySelector('categories');
    if (categoriesElement) {
      console.log('=== –ü–ê–†–°–ò–ù–ì –ö–ê–¢–ï–ì–û–†–Ü–ô ===');
      
      const categories: Array<{id: string; name: string; rz_id?: string}> = [];
      const categoryElements = categoriesElement.querySelectorAll('category');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categoryElements.length}`);
      
      categoryElements.forEach((category, index) => {
        const id = category.getAttribute('id');
        const name = getElementText(category);
        const rz_id = category.getAttribute('rz_id');
        
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä—ñ—è ${index + 1}: "${name}" (ID: ${id}${rz_id ? `, RZ_ID: ${rz_id}` : ''})`);
        
        if (id && name) {
          const categoryObj = { id, name, rz_id: rz_id || undefined };
          categories.push(categoryObj);
          
          result.parameters.push({
            name: `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${name}`,
            value: name,
            path: buildXMLPath(category),
            type: 'parameter',
            category: 'category',
            attributes: getElementAttributes(category)
          });
        }
      });
      
      result.categories = categories;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤
    const offersElement = shopElement.querySelector('offers');
    if (offersElement) {
      console.log('=== –ü–ê–†–°–ò–ù–ì –¢–û–í–ê–†–Ü–í ===');
      
      const offers: Array<{id: string; available?: boolean; [key: string]: any}> = [];
      const offerElements = offersElement.querySelectorAll('offer');
      
      console.log(`–ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${offerElements.length}`);
      
      offerElements.forEach((offer, offerIndex) => {
        const id = offer.getAttribute('id');
        const availableAttr = offer.getAttribute('available');
        const available = availableAttr !== 'false';
        
        console.log(`\n--- –¢–û–í–ê–† ${offerIndex + 1} (ID: ${id}) ---`);
        
        if (!id) return;
        
        const offerObj: {id: string; available?: boolean; [key: string]: any} = { id, available };
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤ —Ç–æ–≤–∞—Ä—É
        const offerFields = [
          'url', 'price', 'price_old', 'old_price', 'price_promo', 'promo_price',
          'currencyId', 'categoryId', 'picture', 'vendor', 'article', 
          'name', 'model', 'name_ua', 'model_ua', 
          'description', 'description_ua', 'state', 'docket', 'docket_ua',
          'stock_quantity', 'quantity_in_stock'
        ];
        
        offerFields.forEach(fieldName => {
          const fieldElement = offer.querySelector(fieldName);
          if (fieldElement) {
            let value = getElementText(fieldElement);
            let displayName = fieldName;
            
            // –ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤ –ø–æ–ª—ñ–≤
            const fieldMapping: {[key: string]: string} = {
              'url': 'URL —Ç–æ–≤–∞—Ä—É',
              'price': '–¶—ñ–Ω–∞',
              'price_old': '–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞', 
              'old_price': '–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞',
              'price_promo': '–ü—Ä–æ–º–æ-—Ü—ñ–Ω–∞',
              'promo_price': '–ü—Ä–æ–º–æ-—Ü—ñ–Ω–∞',
              'currencyId': '–í–∞–ª—é—Ç–∞',
              'categoryId': 'ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó',
              'picture': '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è',
              'vendor': '–í–∏—Ä–æ–±–Ω–∏–∫/–ë—Ä–µ–Ω–¥',
              'article': '–ê—Ä—Ç–∏–∫—É–ª',
              'name': '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É',
              'model': '–ú–æ–¥–µ–ª—å',
              'name_ua': '–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É (UA)',
              'model_ua': '–ú–æ–¥–µ–ª—å (UA)',
              'description': '–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É',
              'description_ua': '–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É (UA)',
              'state': '–°—Ç–∞–Ω —Ç–æ–≤–∞—Ä—É',
              'docket': '–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å',
              'docket_ua': '–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å (UA)',
              'stock_quantity': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ',
              'quantity_in_stock': '–ó–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—É'
            };
            
            displayName = fieldMapping[fieldName] || fieldName;
            
            // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            if (['price', 'price_old', 'old_price', 'price_promo', 'promo_price', 'stock_quantity', 'quantity_in_stock'].includes(fieldName)) {
              const numValue = parseFloat(value);
              if (!isNaN(numValue)) {
                offerObj[fieldName] = numValue;
              }
            } else {
              offerObj[fieldName] = value;
            }
            
            console.log(`  ${displayName}: ${value}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ CDATA –∫–æ–Ω—Ç–µ–Ω—Ç
            const cdataContent = hasCDATA(fieldElement) ? getElementText(fieldElement) : undefined;
            
            result.parameters.push({
              name: displayName,
              value: value,
              path: `${buildXMLPath(offer)}/${fieldName}`,
              type: 'parameter',
              category: 'offer',
              cdata_content: cdataContent
            });
          }
        });

        // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
        const pictureElements = offer.querySelectorAll('picture');
        console.log(`  –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${pictureElements.length}`);
        pictureElements.forEach((picture, pictureIndex) => {
          const imageUrl = getElementText(picture);
          if (imageUrl) {
            result.parameters.push({
              name: `–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${pictureIndex + 1}`,
              value: imageUrl,
              path: `${buildXMLPath(offer)}/picture[${pictureIndex + 1}]`,
              type: 'parameter',
              category: 'offer'
            });
          }
        });

        // –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (param –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
        const paramElements = offer.querySelectorAll('param');
        console.log(`  –ó–Ω–∞–π–¥–µ–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: ${paramElements.length}`);
        
        paramElements.forEach((paramElement, paramIndex) => {
          const paramName = paramElement.getAttribute('name') || `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${paramIndex + 1}`;
          const paramid = paramElement.getAttribute('paramid');
          const valueid = paramElement.getAttribute('valueid');
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
          const valueElements = paramElement.querySelectorAll('value[lang]');
          
          if (valueElements.length > 0) {
            // –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            const multilingual_values: Record<string, string> = {};
            valueElements.forEach(valueElement => {
              const lang = valueElement.getAttribute('lang');
              const value = getElementText(valueElement);
              if (lang && value) {
                multilingual_values[lang] = value;
              }
            });
            
            console.log(`    –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${paramName}":`, multilingual_values);
            
            result.parameters.push({
              name: paramName,
              value: Object.values(multilingual_values).join(' / '),
              path: buildXMLPath(paramElement),
              type: 'characteristic',
              category: 'offer',
              multilingual_values: multilingual_values,
              attributes: {
                name: paramName,
                ...(paramid && { paramid }),
                ...(valueid && { valueid })
              }
            });
          } else {
            // –ó–≤–∏—á–∞–π–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            const value = getElementText(paramElement);
            const isCDATA = hasCDATA(paramElement);
            
            if (value) {
              console.log(`    –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "${paramName}": ${value}${isCDATA ? ' (CDATA)' : ''}`);
              
              result.parameters.push({
                name: paramName,
                value: value,
                path: buildXMLPath(paramElement),
                type: 'characteristic',
                category: 'offer',
                cdata_content: isCDATA ? value : undefined,
                attributes: {
                  name: paramName,
                  ...(paramid && { paramid }),
                  ...(valueid && { valueid })
                }
              });
            }
          }
        });
        
        offers.push(offerObj);
      });
      
      result.offers = offers;
    }
  }

  console.log('\n=== –ü–Ü–î–°–£–ú–û–ö –ü–ê–†–°–ò–ù–ì–£ ===');
  console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤: ${result.parameters.length}`);
  
  return result;
};
