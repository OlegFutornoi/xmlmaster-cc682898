
import { XMLParser } from 'fast-xml-parser';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –º–∞–≥–∞–∑–∏–Ω—É
export interface ShopInfo {
  name: string;
  company: string;
  url: string;
}

export interface CurrencyInfo {
  id: string;
  rate: string; // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ string –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
}

export interface CategoryInfo {
  id: string;
  name: string;
  parentId?: string;
}

export interface OfferCharacteristic {
  name: string;
  value: string;
  unit?: string;
  language?: string;
}

export interface OfferInfo {
  id: string;
  available: string;
  price: number;
  currencyId: string;
  categoryId: string;
  pictures: string[];
  vendor?: string;
  article?: string;
  stock_quantity?: number;
  name: string;
  name_ua?: string;
  description?: string;
  description_ua?: string;
  characteristics: OfferCharacteristic[];
  [key: string]: any;
}

// –î–æ–¥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
export interface TemplateParameter {
  name: string;
  value: string;
  path: string;
  type: string;
  category: string;
}

export interface ParsedXMLStructure {
  shop: ShopInfo;
  currencies: CurrencyInfo[];
  categories: CategoryInfo[];
  offers: OfferInfo[];
  parameters: TemplateParameter[]; // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—é –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–µ—Ä–∞ XML
const parserOptions = {
  ignoreAttributes: false,
  attributeNamePrefix: '@_',
  textNodeName: '#text',
  parseAttributeValue: true,
  parseNodeValue: true,
  trimValues: true,
  cdataPropName: '__cdata',
  parseTrueNumberOnly: false
};

/**
 * –ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ XML —à–∞–±–ª–æ–Ω—É —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞
 */
export function generateTreeStructure(structure: ParsedXMLStructure): string {
  let tree = '';
  
  tree += 'üìã XML Template Structure\n';
  tree += '‚îú‚îÄ‚îÄ üè™ Shop Information\n';
  tree += `‚îÇ   ‚îú‚îÄ‚îÄ Name: ${structure.shop.name}\n`;
  tree += `‚îÇ   ‚îú‚îÄ‚îÄ Company: ${structure.shop.company}\n`;
  tree += `‚îÇ   ‚îî‚îÄ‚îÄ URL: ${structure.shop.url}\n`;
  
  tree += '‚îú‚îÄ‚îÄ üí± Currencies\n';
  structure.currencies.forEach((currency, index) => {
    const isLast = index === structure.currencies.length - 1;
    const connector = isLast ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
    tree += `‚îÇ   ${connector} ${currency.id} (rate: ${currency.rate})\n`;
  });
  
  tree += '‚îú‚îÄ‚îÄ üìÇ Categories\n';
  structure.categories.forEach((category, index) => {
    const isLast = index === structure.categories.length - 1;
    const connector = isLast ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
    const parentInfo = category.parentId ? ` (parent: ${category.parentId})` : '';
    tree += `‚îÇ   ${connector} ${category.name} [${category.id}]${parentInfo}\n`;
  });
  
  tree += '‚îî‚îÄ‚îÄ üéÅ Offers\n';
  structure.offers.forEach((offer, index) => {
    const isLast = index === structure.offers.length - 1;
    const connector = isLast ? '    ‚îî‚îÄ‚îÄ' : '    ‚îú‚îÄ‚îÄ';
    tree += `${connector} ${offer.name} [${offer.id}]\n`;
    tree += `${isLast ? '        ' : '    ‚îÇ   '}‚îú‚îÄ‚îÄ Price: ${offer.price} (${offer.currencyId})\n`;
    tree += `${isLast ? '        ' : '    ‚îÇ   '}‚îú‚îÄ‚îÄ Category: ${offer.categoryId}\n`;
    tree += `${isLast ? '        ' : '    ‚îÇ   '}‚îú‚îÄ‚îÄ Available: ${offer.available}\n`;
    
    if (offer.characteristics.length > 0) {
      tree += `${isLast ? '        ' : '    ‚îÇ   '}‚îî‚îÄ‚îÄ Characteristics (${offer.characteristics.length})\n`;
      offer.characteristics.forEach((char, charIndex) => {
        const isLastChar = charIndex === offer.characteristics.length - 1;
        const charConnector = isLastChar ? '‚îî‚îÄ‚îÄ' : '‚îú‚îÄ‚îÄ';
        tree += `${isLast ? '        ' : '    ‚îÇ   '}    ${charConnector} ${char.name}: ${char.value}\n`;
      });
    }
  });
  
  return tree;
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É XML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
export function parseXMLToStructure(xmlContent: string): ParsedXMLStructure {
  console.log('üöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ XML –∫–æ–Ω—Ç–µ–Ω—Ç—É...');
  
  try {
    const parser = new XMLParser(parserOptions);
    const parsedData = parser.parse(xmlContent);
    
    console.log('üìä XML —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –≤ –æ–±\'—î–∫—Ç:', parsedData);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç yml_catalog –∞–±–æ shop
    const catalog = parsedData.yml_catalog || parsedData;
    const shop = catalog.shop || {};
    
    console.log('üè™ –ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω:', shop);

    // –ü–∞—Ä—Å–∏–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
    const shopInfo: ShopInfo = {
      name: extractTextValue(shop.name) || '–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω',
      company: extractTextValue(shop.company) || '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–ø–∞–Ω—ñ—è',
      url: extractTextValue(shop.url) || ''
    };
    
    console.log('‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω:', shopInfo);

    // –ü–∞—Ä—Å–∏–º–æ –≤–∞–ª—é—Ç–∏
    const currencies = parseCurrencies(shop.currencies || {});
    console.log('üí± –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç:', currencies.length);

    // –ü–∞—Ä—Å–∏–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    const categories = parseCategories(shop.categories || {});
    console.log('üìÇ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', categories.length);

    // –ü–∞—Ä—Å–∏–º–æ —Ç–æ–≤–∞—Ä–∏
    const offers = parseOffers(shop.offers || {});
    console.log('üéÅ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤:', offers.length);

    const result: ParsedXMLStructure = {
      shop: shopInfo,
      currencies,
      categories,
      offers,
      parameters: [] // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    };
    
    console.log('üéØ –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞:', {
      shopName: result.shop.name,
      currenciesCount: result.currencies.length,
      categoriesCount: result.categories.length,
      offersCount: result.offers.length
    });
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É XML:', error);
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É

function extractTextValue(value: any): string {
  if (typeof value === 'string') return value;
  if (typeof value === 'object' && value !== null) {
    return value['#text'] || value._text || String(value);
  }
  return String(value || '');
}

function parseCurrencies(currenciesData: any): CurrencyInfo[] {
  console.log('üí± –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–ª—é—Ç:', currenciesData);
  
  const currencies: CurrencyInfo[] = [];
  
  if (currenciesData && currenciesData.currency) {
    const currencyList = Array.isArray(currenciesData.currency) 
      ? currenciesData.currency 
      : [currenciesData.currency];
    
    currencyList.forEach((currency: any) => {
      if (currency && currency['@_id']) {
        currencies.push({
          id: String(currency['@_id']),
          rate: String(currency['@_rate'] || '1') // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ string
        });
      }
    });
  }
  
  console.log('‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –≤–∞–ª—é—Ç:', currencies);
  return currencies;
}

function parseCategories(categoriesData: any): CategoryInfo[] {
  console.log('üìÇ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', categoriesData);
  
  const categories: CategoryInfo[] = [];
  
  if (categoriesData && categoriesData.category) {
    const categoryList = Array.isArray(categoriesData.category) 
      ? categoriesData.category 
      : [categoriesData.category];
    
    categoryList.forEach((category: any) => {
      if (category && category['@_id']) {
        const categoryInfo: CategoryInfo = {
          id: String(category['@_id']),
          name: extractTextValue(category)
        };
        
        if (category['@_parentId']) {
          categoryInfo.parentId = String(category['@_parentId']);
        }
        
        categories.push(categoryInfo);
      }
    });
  }
  
  console.log('‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', categories);
  return categories;
}

function parseOffers(offersData: any): OfferInfo[] {
  console.log('üéÅ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤:', offersData);
  
  const offers: OfferInfo[] = [];
  
  if (offersData && offersData.offer) {
    const offerList = Array.isArray(offersData.offer) 
      ? offersData.offer 
      : [offersData.offer];
    
    offerList.forEach((offer: any) => {
      if (offer && offer['@_id']) {
        const offerInfo: OfferInfo = {
          id: String(offer['@_id']),
          available: String(offer['@_available'] || 'true'),
          price: parseFloat(offer.price) || 0,
          currencyId: String(offer.currencyId || offer.currency_id || ''),
          categoryId: String(offer.categoryId || offer.category_id || ''),
          pictures: parsePictures(offer.picture),
          name: extractTextValue(offer.name) || '',
          characteristics: parseCharacteristics(offer.param || [])
        };
        
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
        if (offer.vendor) offerInfo.vendor = extractTextValue(offer.vendor);
        if (offer.article) offerInfo.article = extractTextValue(offer.article);
        if (offer.stock_quantity) offerInfo.stock_quantity = parseInt(offer.stock_quantity) || 0;
        if (offer.name_ua) offerInfo.name_ua = extractTextValue(offer.name_ua);
        if (offer.description) offerInfo.description = extractTextValue(offer.description);
        if (offer.description_ua) offerInfo.description_ua = extractTextValue(offer.description_ua);
        
        offers.push(offerInfo);
      }
    });
  }
  
  console.log('‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤:', offers);
  return offers;
}

function parsePictures(pictureData: any): string[] {
  if (!pictureData) return [];
  
  const pictures = Array.isArray(pictureData) ? pictureData : [pictureData];
  return pictures.map(pic => extractTextValue(pic)).filter(url => url.trim());
}

function parseCharacteristics(paramData: any): OfferCharacteristic[] {
  if (!paramData) return [];
  
  const params = Array.isArray(paramData) ? paramData : [paramData];
  
  return params.map((param: any) => {
    const characteristic: OfferCharacteristic = {
      name: String(param['@_name'] || '–ù–µ–≤—ñ–¥–æ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'),
      value: extractTextValue(param)
    };
    
    if (param['@_unit']) characteristic.unit = String(param['@_unit']);
    if (param['@_lang']) characteristic.language = String(param['@_lang']);
    
    return characteristic;
  });
}
