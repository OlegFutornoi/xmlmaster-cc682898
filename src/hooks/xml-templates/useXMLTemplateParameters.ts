
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { XMLTemplateParameter } from '@/types/xml-template';

// –ü—Ä–∞–≤–∏–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ —ñ—î—Ä–∞—Ä—Ö—ñ—î—é XML —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
const sortParametersByXMLHierarchy = (params: XMLTemplateParameter[]) => {
  return params.sort((a, b) => {
    const categoryA = a.parameter_category || 'parameter';
    const categoryB = b.parameter_category || 'parameter';
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑–≥—ñ–¥–Ω–æ –∑ XML —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    const categoryOrder = {
      'parameter': 0,     // 1. –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–∞–≥–∞–∑–∏–Ω—É
      'currency': 1,      // 2. –í–∞–ª—é—Ç–∏
      'category': 2,      // 3. –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
      'offer': 3,         // 4. –¢–æ–≤–∞—Ä–∏
      'characteristic': 4 // 5. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤
    };
    
    const orderA = categoryOrder[categoryA as keyof typeof categoryOrder] ?? 999;
    const orderB = categoryOrder[categoryB as keyof typeof categoryOrder] ?? 999;
    
    // –°–ø–æ—á–∞—Ç–∫—É —Å–æ—Ä—Ç—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
    if (orderA !== orderB) {
      return orderA - orderB;
    }
    
    // –ü–æ—Ç—ñ–º –ø–æ display_order –≤ –º–µ–∂–∞—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if (a.display_order !== b.display_order) {
      return (a.display_order || 0) - (b.display_order || 0);
    }
    
    // –ù–∞—Ä–µ—à—Ç—ñ –ø–æ –Ω–∞–∑–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    return a.parameter_name.localeCompare(b.parameter_name);
  });
};

export const useXMLTemplateParameters = (templateId: string | undefined) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: parameters = [], isLoading, error, refetch } = useQuery({
    queryKey: ['template-xml-parameters', templateId],
    queryFn: async (): Promise<XMLTemplateParameter[]> => {
      if (!templateId) return [];
      
      console.log('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —à–∞–±–ª–æ–Ω—É:', templateId);
      
      const { data, error } = await supabase
        .from('template_xml_parameters')
        .select('*')
        .eq('template_id', templateId)
        .order('display_order', { ascending: true });

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —à–∞–±–ª–æ–Ω—É:', error);
        throw error;
      }
      
      console.log(`üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${data?.length || 0} –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —à–∞–±–ª–æ–Ω—É`);
      
      // –ü—Ä–∏–≤–æ–¥–∏–º–æ TypeScript —Ç–∏–ø–∏ –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
      const typedData = (data || []).map(item => ({
        ...item,
        parameter_category: item.parameter_category as 'parameter' | 'characteristic' | 'category' | 'offer' | 'currency',
        nested_values: item.nested_values ? 
          (typeof item.nested_values === 'string' ? 
            JSON.parse(item.nested_values) : 
            item.nested_values
          ) : undefined
      }));
      
      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
      const sortedData = sortParametersByXMLHierarchy(typedData);
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—î—é XML');
      
      return sortedData;
    },
    enabled: !!templateId,
  });

  const createParameterMutation = useMutation({
    mutationFn: async (parameterData: any) => {
      console.log('üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', parameterData);
      
      // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ parameter_name –ù–ï null
      if (!parameterData.parameter_name || parameterData.parameter_name.trim() === '') {
        parameterData.parameter_name = '–ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä';
      }
      
      // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –æ—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
      const cleanedData = {
        template_id: parameterData.template_id,
        parameter_name: String(parameterData.parameter_name).trim(),
        parameter_value: String(parameterData.parameter_value || ''),
        xml_path: String(parameterData.xml_path || 'shop/'),
        parameter_type: String(parameterData.parameter_type || 'text'),
        parameter_category: String(parameterData.parameter_category || 'parameter'),
        parent_parameter: parameterData.parent_parameter || null,
        is_active: Boolean(parameterData.is_active ?? true),
        is_required: Boolean(parameterData.is_required ?? false),
        display_order: Number(parameterData.display_order ?? 0),
        nested_values: parameterData.nested_values || null
      };
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
      if (!cleanedData.template_id) {
        throw new Error('ID —à–∞–±–ª–æ–Ω—É —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
      }
      
      console.log('üìã –û—á–∏—â–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:', cleanedData);
      
      const { data, error } = await supabase
        .from('template_xml_parameters')
        .insert([cleanedData])
        .select()
        .single();

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
        throw error;
      }
      
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['template-xml-parameters', templateId] });
      toast({
        title: "–£—Å–ø—ñ—Ö",
        description: "–ü–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      });
    },
    onError: (error: any) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä",
        variant: "destructive",
      });
    },
  });

  const updateParameterMutation = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {
      console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', id, updates);
      
      // –û—á–∏—â—É—î–º–æ updates –≤—ñ–¥ undefined –∑–Ω–∞—á–µ–Ω—å
      const cleanedUpdates = Object.fromEntries(
        Object.entries(updates).filter(([_, value]) => value !== undefined)
      );
      
      const { error } = await supabase
        .from('template_xml_parameters')
        .update(cleanedUpdates)
        .eq('id', id);

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['template-xml-parameters', templateId] });
      toast({
        title: "–£—Å–ø—ñ—Ö",
        description: "–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      });
    },
    onError: (error: any) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä",
        variant: "destructive",
      });
    },
  });

  const deleteParameterMutation = useMutation({
    mutationFn: async (parameterId: string) => {
      console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', parameterId);
      
      const { error } = await supabase
        .from('template_xml_parameters')
        .delete()
        .eq('id', parameterId);

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['template-xml-parameters', templateId] });
      toast({
        title: "–£—Å–ø—ñ—Ö",
        description: "–ü–∞—Ä–∞–º–µ—Ç—Ä –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      });
    },
    onError: (error: any) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä",
        variant: "destructive",
      });
    },
  });

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  const createParameterAsync = async (parameterData: any): Promise<void> => {
    // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è parameter_name
    if (!parameterData.parameter_name?.trim()) {
      parameterData.parameter_name = '–ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä';
    }
    
    if (!parameterData.template_id) {
      throw new Error('ID —à–∞–±–ª–æ–Ω—É —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!parameterData.xml_path?.trim()) {
      parameterData.xml_path = 'shop/';
    }
    
    return new Promise<void>((resolve, reject) => {
      createParameterMutation.mutate(parameterData, {
        onSuccess: () => {
          console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ async —Ñ—É–Ω–∫—Ü—ñ—é');
          resolve();
        },
        onError: (error) => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ async —Ñ—É–Ω–∫—Ü—ñ—ó:', error);
          reject(error);
        }
      });
    });
  };

  return {
    parameters,
    isLoading,
    error,
    refetch,
    createParameter: createParameterMutation.mutate,
    createParameterAsync,
    updateParameter: updateParameterMutation.mutate,
    deleteParameter: deleteParameterMutation.mutate,
    isCreating: createParameterMutation.isPending,
    isUpdating: updateParameterMutation.isPending,
    isDeleting: deleteParameterMutation.isPending,
  };
};
