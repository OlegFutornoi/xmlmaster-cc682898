
// –û–Ω–æ–≤–ª–µ–Ω—ñ –≤–∫–ª–∞–¥–∫–∏ –¥–∞–Ω–∏—Ö —à–∞–±–ª–æ–Ω—É –∑ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º –¥–∏–∑–∞–π–Ω–æ–º
import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ParsedXMLStructure } from '@/utils/advancedXmlParser';
import { useXMLTemplateParameters } from '@/hooks/xml-templates/useXMLTemplateParameters';
import ShopInfoTab from './tabs/ShopInfoTab';
import OffersTab from './tabs/OffersTab';
import CharacteristicsTab from './tabs/CharacteristicsTab';
import CompactParameterItem from './CompactParameterItem';
import { Button } from '@/components/ui/button';
import { Plus } from 'lucide-react';

interface TemplateDataTabsProps {
  structure: ParsedXMLStructure;
  templateId?: string;
  templateName: string;
  onSave?: (updatedStructure: ParsedXMLStructure) => void;
  isEditable?: boolean;
}

const TemplateDataTabs: React.FC<TemplateDataTabsProps> = ({
  structure,
  templateId,
  templateName,
  onSave,
  isEditable = false
}) => {
  const [activeTab, setActiveTab] = useState('shop');
  const {
    parameters = [],
    createParameterAsync,
    updateParameter: updateParameterMutation,
    deleteParameter: deleteParameterMutation
  } = useXMLTemplateParameters(templateId);

  // Wrapper functions for proper parameter passing
  const updateParameter = (id: string, updates: any) => {
    updateParameterMutation({
      id,
      updates
    });
  };
  
  const deleteParameter = (id: string) => {
    deleteParameterMutation(id);
  };

  // –ó–∞—Ö–∏—â–∞—î–º–æ –≤—ñ–¥ undefined values
  const safeCurrencies = structure.currencies || [];
  const safeCategories = structure.categories || [];
  const safeOffers = structure.offers || [];

  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const offerParametersCount = (parameters || []).filter(p => p.parameter_category === 'offer').length;

  // Handler functions for adding parameters
  const handleAddShopParameter = async () => {
    if (!templateId) return;
    try {
      await createParameterAsync({
        template_id: templateId,
        parameter_name: '–ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω—É',
        parameter_value: '',
        parameter_type: 'text',
        parameter_category: 'parameter',
        xml_path: 'shop/',
        is_active: true,
        is_required: false,
        display_order: 0
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É:', error);
    }
  };
  
  const handleAddCurrencyParameter = async () => {
    if (!templateId) return;
    try {
      await createParameterAsync({
        template_id: templateId,
        parameter_name: '–ù–æ–≤–∞ –≤–∞–ª—é—Ç–∞',
        parameter_value: '',
        parameter_type: 'text',
        parameter_category: 'currency',
        xml_path: 'shop/currencies/currency',
        is_active: true,
        is_required: false,
        display_order: 0
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–ª—é—Ç–∏:', error);
    }
  };
  
  const handleAddCategoryParameter = async () => {
    if (!templateId) return;
    try {
      await createParameterAsync({
        template_id: templateId,
        parameter_name: '–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è',
        parameter_value: '',
        parameter_type: 'text',
        parameter_category: 'category',
        xml_path: 'shop/categories/category',
        is_active: true,
        is_required: false,
        display_order: 0
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:', error);
    }
  };
  
  const handleAddOfferParameter = async () => {
    if (!templateId) return;
    try {
      await createParameterAsync({
        template_id: templateId,
        parameter_name: '–ù–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–≤–∞—Ä—É',
        parameter_value: '',
        parameter_type: 'text',
        parameter_category: 'offer',
        xml_path: 'shop/offers/offer/',
        is_active: true,
        is_required: false,
        display_order: 0
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Ç–æ–≤–∞—Ä—É:', error);
    }
  };
  
  const handleAddCharacteristic = async () => {
    if (!templateId) return;
    try {
      await createParameterAsync({
        template_id: templateId,
        parameter_name: '–ù–æ–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
        parameter_value: '',
        parameter_type: 'text',
        parameter_category: 'characteristic',
        xml_path: 'shop/offers/offer/param',
        is_active: true,
        is_required: false,
        display_order: 0
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', error);
    }
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardContent className="p-6">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-5">
              <TabsTrigger value="shop" className="text-sm">üè™ –ú–∞–≥–∞–∑–∏–Ω</TabsTrigger>
              <TabsTrigger value="currencies" className="text-sm">üí± –í–∞–ª—é—Ç–∏</TabsTrigger>
              <TabsTrigger value="categories" className="text-sm">üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</TabsTrigger>
              <TabsTrigger value="offers" className="text-sm">‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏</TabsTrigger>
              <TabsTrigger value="characteristics" className="text-sm">üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</TabsTrigger>
            </TabsList>

            {/* –í–∫–ª–∞–¥–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É */}
            <TabsContent value="shop" className="mt-6">
              <ShopInfoTab 
                structure={structure}
                parameters={parameters || []}
                isEditable={isEditable}
                onAddParameter={handleAddShopParameter}
                onUpdateParameter={updateParameter}
                onDeleteParameter={deleteParameter}
              />
            </TabsContent>

            {/* –í–∫–ª–∞–¥–∫–∞ –≤–∞–ª—é—Ç */}
            <TabsContent value="currencies" className="mt-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <h3 className="font-semibold text-gray-900">–í–∞–ª—é—Ç–∏ ({safeCurrencies.length})</h3>
                    <p className="text-sm text-gray-600">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç –º–∞–≥–∞–∑–∏–Ω—É</p>
                  </div>
                  {isEditable && (
                    <Button 
                      onClick={handleAddCurrencyParameter} 
                      size="sm" 
                      className="gap-2"
                      id="add-currency-parameter"
                    >
                      <Plus className="h-4 w-4" />
                      –î–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É
                    </Button>
                  )}
                </div>
                
                <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                  {safeCurrencies.map(currency => (
                    <CompactParameterItem
                      key={currency.id}
                      label={`–í–∞–ª—é—Ç–∞ ${currency.id}`}
                      value={`–ö—É—Ä—Å: ${currency.rate}`}
                      category="currency"
                      id={`currency-${currency.id}`}
                      onEdit={isEditable ? (newValue) => console.log('Edit currency:', newValue) : undefined}
                    />
                  ))}
                  
                  {(parameters || []).filter(p => p.parameter_category === 'currency').map(param => (
                    <CompactParameterItem
                      key={param.id}
                      label={param.parameter_name}
                      value={param.parameter_value || ''}
                      category="currency"
                      id={`currency-param-${param.id}`}
                      onEdit={isEditable ? (newValue) => updateParameter(param.id, { parameter_value: newValue }) : undefined}
                      onDelete={isEditable ? () => deleteParameter(param.id) : undefined}
                      onAdd={isEditable ? handleAddCurrencyParameter : undefined}
                    />
                  ))}
                  
                  {safeCurrencies.length === 0 && (parameters || []).filter(p => p.parameter_category === 'currency').length === 0 && (
                    <div className="p-6 text-center text-gray-500">
                      <p>–í–∞–ª—é—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>
                    </div>
                  )}
                </div>
              </div>
            </TabsContent>

            {/* –í–∫–ª–∞–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π */}
            <TabsContent value="categories" className="mt-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                  <div>
                    <h3 className="font-semibold text-gray-900">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó ({safeCategories.length})</h3>
                    <p className="text-sm text-gray-600">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤</p>
                  </div>
                  {isEditable && (
                    <Button 
                      onClick={handleAddCategoryParameter} 
                      size="sm" 
                      className="gap-2"
                      id="add-category-parameter"
                    >
                      <Plus className="h-4 w-4" />
                      –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                    </Button>
                  )}
                </div>
                
                <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                  {safeCategories.map(category => (
                    <CompactParameterItem
                      key={category.id}
                      label={category.name}
                      value={`ID: ${category.id}${category.parentId ? `, –ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞: ${category.parentId}` : ''}`}
                      category="category"
                      id={`category-${category.id}`}
                      onEdit={isEditable ? (newValue) => console.log('Edit category:', newValue) : undefined}
                    />
                  ))}
                  
                  {(parameters || []).filter(p => p.parameter_category === 'category').map(param => (
                    <CompactParameterItem
                      key={param.id}
                      label={param.parameter_name}
                      value={param.parameter_value || ''}
                      category="category"
                      id={`category-param-${param.id}`}
                      onEdit={isEditable ? (newValue) => updateParameter(param.id, { parameter_value: newValue }) : undefined}
                      onDelete={isEditable ? () => deleteParameter(param.id) : undefined}
                      onAdd={isEditable ? handleAddCategoryParameter : undefined}
                    />
                  ))}
                  
                  {safeCategories.length === 0 && (parameters || []).filter(p => p.parameter_category === 'category').length === 0 && (
                    <div className="p-6 text-center text-gray-500">
                      <p>–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>
                    </div>
                  )}
                </div>
              </div>
            </TabsContent>

            {/* –í–∫–ª–∞–¥–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ (–ø–µ—Ä–µ—ñ–º–µ–Ω–æ–≤–∞–Ω–æ –∑ "—Ç–æ–≤–∞—Ä–∏" –Ω–∞ "–ø–∞—Ä–∞–º–µ—Ç—Ä–∏") */}
            <TabsContent value="offers" className="mt-6">
              <OffersTab 
                structure={structure}
                parameters={parameters || []}
                isEditable={isEditable}
                onAddParameter={handleAddOfferParameter}
                onUpdateParameter={updateParameter}
                onDeleteParameter={deleteParameter}
              />
            </TabsContent>

            {/* –í–∫–ª–∞–¥–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
            <TabsContent value="characteristics" className="mt-6">
              <CharacteristicsTab 
                structure={structure}
                parameters={parameters || []}
                isEditable={isEditable}
                onAddParameter={handleAddCharacteristic}
                onUpdateParameter={updateParameter}
                onDeleteParameter={deleteParameter}
              />
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
};

export default TemplateDataTabs;
