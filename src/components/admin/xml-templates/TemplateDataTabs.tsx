
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö XML —à–∞–±–ª–æ–Ω—É
import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Save, Plus, Trash2, Edit } from 'lucide-react';
import { ParsedXMLStructure } from '@/utils/advancedXmlParser';

interface TemplateDataTabsProps {
  structure: ParsedXMLStructure;
  onSave: (structure: ParsedXMLStructure) => void;
  isEditable?: boolean;
}

const TemplateDataTabs = ({ structure, onSave, isEditable = true }: TemplateDataTabsProps) => {
  const [editableStructure, setEditableStructure] = useState<ParsedXMLStructure>(structure);
  const [hasChanges, setHasChanges] = useState(false);

  const handleSave = () => {
    onSave(editableStructure);
    setHasChanges(false);
  };

  const updateShopInfo = (field: keyof typeof editableStructure.shop, value: string) => {
    setEditableStructure(prev => ({
      ...prev,
      shop: { ...prev.shop, [field]: value }
    }));
    setHasChanges(true);
  };

  const updateCurrency = (index: number, field: 'id' | 'rate', value: string) => {
    setEditableStructure(prev => ({
      ...prev,
      currencies: prev.currencies.map((currency, i) => 
        i === index ? { ...currency, [field]: value } : currency
      )
    }));
    setHasChanges(true);
  };

  const addCurrency = () => {
    setEditableStructure(prev => ({
      ...prev,
      currencies: [...prev.currencies, { id: '', rate: '1' }]
    }));
    setHasChanges(true);
  };

  const removeCurrency = (index: number) => {
    setEditableStructure(prev => ({
      ...prev,
      currencies: prev.currencies.filter((_, i) => i !== index)
    }));
    setHasChanges(true);
  };

  const updateCategory = (index: number, field: 'id' | 'name', value: string) => {
    setEditableStructure(prev => ({
      ...prev,
      categories: prev.categories.map((category, i) => 
        i === index ? { ...category, [field]: value } : category
      )
    }));
    setHasChanges(true);
  };

  const addCategory = () => {
    setEditableStructure(prev => ({
      ...prev,
      categories: [...prev.categories, { id: '', name: '' }]
    }));
    setHasChanges(true);
  };

  const removeCategory = (index: number) => {
    setEditableStructure(prev => ({
      ...prev,
      categories: prev.categories.filter((_, i) => i !== index)
    }));
    setHasChanges(true);
  };

  return (
    <div className="space-y-4">
      {hasChanges && isEditable && (
        <div className="flex justify-end">
          <Button onClick={handleSave} className="gap-2" id="save-template-changes">
            <Save className="h-4 w-4" />
            –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
          </Button>
        </div>
      )}

      <Tabs defaultValue="shop" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="shop">–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</TabsTrigger>
          <TabsTrigger value="currencies">
            –í–∞–ª—é—Ç–∏ 
            <Badge variant="secondary" className="ml-2">
              {editableStructure.currencies.length}
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="categories">
            –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó 
            <Badge variant="secondary" className="ml-2">
              {editableStructure.categories.length}
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="offers">
            –¢–æ–≤–∞—Ä–∏ 
            <Badge variant="secondary" className="ml-2">
              {editableStructure.offers.length}
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="characteristics">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</TabsTrigger>
        </TabsList>

        <TabsContent value="shop" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üè™ –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º–∞–≥–∞–∑–∏–Ω—É
              </CardTitle>
              <CardDescription>
                –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="shop-name">–ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É</Label>
                  <Input
                    id="shop-name"
                    value={editableStructure.shop.name || ''}
                    onChange={(e) => updateShopInfo('name', e.target.value)}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º–∞–≥–∞–∑–∏–Ω—É"
                    disabled={!isEditable}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="shop-company">–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó</Label>
                  <Input
                    id="shop-company"
                    value={editableStructure.shop.company || ''}
                    onChange={(e) => updateShopInfo('company', e.target.value)}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó"
                    disabled={!isEditable}
                  />
                </div>
              </div>
              <div className="space-y-2">
                <Label htmlFor="shop-url">URL –º–∞–≥–∞–∑–∏–Ω—É</Label>
                <Input
                  id="shop-url"
                  value={editableStructure.shop.url || ''}
                  onChange={(e) => updateShopInfo('url', e.target.value)}
                  placeholder="https://www.example.com"
                  disabled={!isEditable}
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="currencies" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    üí± –í–∞–ª—é—Ç–∏
                  </CardTitle>
                  <CardDescription>
                    –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç —Ç–∞ —ó—Ö –∫—É—Ä—Å—ñ–≤
                  </CardDescription>
                </div>
                {isEditable && (
                  <Button onClick={addCurrency} size="sm" className="gap-2" id="add-currency-button">
                    <Plus className="h-4 w-4" />
                    –î–æ–¥–∞—Ç–∏ –≤–∞–ª—é—Ç—É
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {editableStructure.currencies.map((currency, index) => (
                <div key={index} className="flex items-center gap-4 p-4 border rounded-lg">
                  <div className="flex-1 grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>–ö–æ–¥ –≤–∞–ª—é—Ç–∏</Label>
                      <Input
                        value={currency.id}
                        onChange={(e) => updateCurrency(index, 'id', e.target.value)}
                        placeholder="USD, EUR, UAH..."
                        disabled={!isEditable}
                        id={`currency-id-${index}`}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>–ö—É—Ä—Å</Label>
                      <Input
                        value={currency.rate}
                        onChange={(e) => updateCurrency(index, 'rate', e.target.value)}
                        placeholder="1.00"
                        disabled={!isEditable}
                        id={`currency-rate-${index}`}
                      />
                    </div>
                  </div>
                  {isEditable && (
                    <Button
                      onClick={() => removeCurrency(index)}
                      variant="destructive"
                      size="sm"
                      id={`remove-currency-${index}`}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              ))}
              {editableStructure.currencies.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  –í–∞–ª—é—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É –≤–∞–ª—é—Ç—É.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="categories" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
                  </CardTitle>
                  <CardDescription>
                    –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –º–∞–≥–∞–∑–∏–Ω—É
                  </CardDescription>
                </div>
                {isEditable && (
                  <Button onClick={addCategory} size="sm" className="gap-2" id="add-category-button">
                    <Plus className="h-4 w-4" />
                    –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {editableStructure.categories.map((category, index) => (
                <div key={index} className="flex items-center gap-4 p-4 border rounded-lg">
                  <div className="flex-1 grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label>ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</Label>
                      <Input
                        value={category.id}
                        onChange={(e) => updateCategory(index, 'id', e.target.value)}
                        placeholder="1, 2, 3..."
                        disabled={!isEditable}
                        id={`category-id-${index}`}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label>–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</Label>
                      <Input
                        value={category.name}
                        onChange={(e) => updateCategory(index, 'name', e.target.value)}
                        placeholder="–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"
                        disabled={!isEditable}
                        id={`category-name-${index}`}
                      />
                    </div>
                  </div>
                  {isEditable && (
                    <Button
                      onClick={() => removeCategory(index)}
                      variant="destructive"
                      size="sm"
                      id={`remove-category-${index}`}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              ))}
              {editableStructure.categories.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="offers" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üéÅ –¢–æ–≤–∞—Ä–∏
              </CardTitle>
              <CardDescription>
                –ü–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
              </CardDescription>
            </CardHeader>
            <CardContent>
              {editableStructure.offers.length > 0 ? (
                <div className="space-y-6">
                  {editableStructure.offers.slice(0, 3).map((offer, index) => (
                    <div key={index} className="border rounded-lg p-4 space-y-4">
                      <div className="flex items-center justify-between">
                        <h4 className="font-semibold text-lg">
                          üì¶ –¢–æ–≤–∞—Ä #{offer.id} 
                          {offer.available === 'false' && (
                            <Badge variant="destructive" className="ml-2">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</Badge>
                          )}
                        </h4>
                        <Badge variant="outline">–û—Ñ–µ—Ä {index + 1}</Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm">
                        <div><strong>üí≤ –¶—ñ–Ω–∞:</strong> {offer.price || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>üí± –í–∞–ª—é—Ç–∞:</strong> {offer.currencyId || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>üóÇÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</strong> {offer.categoryId || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>üè∑Ô∏è –í–∏—Ä–æ–±–Ω–∏–∫:</strong> {offer.vendor || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>üîñ –ê—Ä—Ç–∏–∫—É–ª:</strong> {offer.article || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                        <div><strong>üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å:</strong> {offer.stock_quantity || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</div>
                      </div>

                      {offer.name && (
                        <div><strong>üè∑Ô∏è –ù–∞–∑–≤–∞ (RU):</strong> {offer.name}</div>
                      )}
                      {offer.name_ua && (
                        <div><strong>üè∑Ô∏è –ù–∞–∑–≤–∞ (UA):</strong> {offer.name_ua}</div>
                      )}

                      {offer.pictures.length > 0 && (
                        <div>
                          <strong>üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ({offer.pictures.length}):</strong>
                          <div className="mt-2 space-y-1">
                            {offer.pictures.map((picture, picIndex) => (
                              <div key={picIndex} className="text-xs text-blue-600 break-all">
                                {picture}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {offer.characteristics.length > 0 && (
                        <div>
                          <strong>üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ({offer.characteristics.length}):</strong>
                          <div className="mt-2 grid gap-2">
                            {offer.characteristics.map((char, charIndex) => (
                              <div key={charIndex} className="text-sm border-l-2 pl-3">
                                <div className="font-medium">{char.name}:</div>
                                {char.values.map((val, valIndex) => (
                                  <div key={valIndex} className="text-gray-600 ml-2">
                                    {val.lang && (
                                      <Badge variant="outline" className="mr-2 text-xs">
                                        {val.lang.toUpperCase()}
                                      </Badge>
                                    )}
                                    {val.value}
                                  </div>
                                ))}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {editableStructure.offers.length > 3 && (
                    <div className="text-center py-4 text-gray-500">
                      ... —Ç–∞ —â–µ {editableStructure.offers.length - 3} —Ç–æ–≤–∞—Ä—ñ–≤
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  –¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="characteristics" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </CardTitle>
              <CardDescription>
                –í—Å—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ –Ω–∞–∑–≤–∞—Ö
              </CardDescription>
            </CardHeader>
            <CardContent>
              {(() => {
                // –ì—Ä—É–ø—É—î–º–æ –≤—Å—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–∑–≤–∞—Ö
                const groupedCharacteristics = editableStructure.offers
                  .flatMap(offer => offer.characteristics)
                  .reduce((acc, char) => {
                    if (!acc[char.name]) {
                      acc[char.name] = [];
                    }
                    acc[char.name].push(...char.values);
                    return acc;
                  }, {} as Record<string, Array<{ value: string; lang?: string }>>);

                const characteristicNames = Object.keys(groupedCharacteristics);

                return characteristicNames.length > 0 ? (
                  <div className="space-y-4">
                    {characteristicNames.map((name, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <h4 className="font-semibold mb-2">üìè {name}</h4>
                        <div className="space-y-2">
                          {Array.from(new Set(
                            groupedCharacteristics[name].map(v => `${v.value}|${v.lang || ''}`)
                          )).map((uniqueValue, valueIndex) => {
                            const [value, lang] = uniqueValue.split('|');
                            return (
                              <div key={valueIndex} className="flex items-center gap-2">
                                {lang && (
                                  <Badge variant="outline" className="text-xs">
                                    {lang.toUpperCase()}
                                  </Badge>
                                )}
                                <span className="text-sm">{value}</span>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                  </div>
                );
              })()}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default TemplateDataTabs;
